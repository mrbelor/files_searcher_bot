import fitz, re
from abc import ABC, abstractmethod
from datetime import datetime
from pathlib import Path
from PIL import Image, ImageDraw
from io import BytesIO
from pprint import pprint as pp

from .file_manager_configs import *
# –Ω–æ–≤—ã–µ –∞–ª–∏–∞—Å—ã –Ω–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏!

from .ocr import process_image as ocr_process_image
from .ocr import download_lang_data as ocr_download
ocr_download() # —Å—Ä–∞–∑—É –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞

'''
–ø—Ä–∞–≤–∏–ª–∞ –Ω–µ–π–º–∏–Ω–≥–∞

–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - snake_case
–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã - UPPER_CASE
–∫–ª–∞—Å—Å—ã - PascalCase
—Ñ—É–Ω–∫—Ü–∏–∏/–º–µ—Ç–æ–¥—ã - camelCase

—Ñ–∏–∫—Å –º–µ—Ç–∫–∏ - FIXME
—Ç—É–¥—É –º–µ—Ç–∫–∏ - TODO

–ø—Ä–∞–≤–∏–ª–∞ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å:
{INFO} - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
{OK} - —É—Å–ø–µ—Ö
{ERROR} - –æ—à–∏–±–∫–∞

—Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
<class_name>.<method_name>: <information> # –æ–∑–Ω–∞—á–∞–µ—Ç –∑–∞–ø—É—Å–∫ –º–µ—Ç–æ–¥–∞ c –¥–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
<class_name>.<method_name> <INFO/OK/ERROR>: <message> # –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
'''


class BaseParser(ABC):
	@abstractmethod
	def run(self, file_path):
		pass
	
	''' 
	# —É –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –æ–Ω —Å–≤–æ–π –∏–∑-–∑–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
	# –ù–û –Ω–µ —É –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –æ–Ω –µ—Å—Ç—å
	@abstractmethod
	def renderToPic(cls, file_path, page_num, output_path):
		pass
	'''

	@classmethod
	def ocrEngine(cls, image): # image - PIL.Image.Image –∏–ª–∏ –ø—É—Ç—å Path
		ocr_text, ocr_words = ocr_process_image(image)
		
		one_words_page = []
		for word, coords in ocr_words:
			one_words_page.append({
				"word": cls.cleanText(word),
				"coords": coords
			})
		return ocr_text, one_words_page
	
	
	@staticmethod
	def _filenameToDict(path:Path):
		# fix –º–∞–∫–±—É–∫–æ–≤—Å–∫–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –±—É–∫–≤—ã —ë (–≤–æ—Ç —Ç–∞–∫: –µÃà) –∏ –±—É–∫–≤—ã –π (–≤–æ—Ç —Ç–∞–∫: –∏ÃÜ)
		filepath = Path(
			str(Path(path).resolve())
				.replace('–∏\u0306','–π')
				.replace('–µ\u0308','—ë')
		)
		filename = filepath.name


		dateFormat = lambda date_str: datetime.strptime(date_str, "%Y%m%d").strftime("%d.%m.%Y") # date_str '20250313' => '13.03.2025'
		m = FILE_REGEX.match(filename)

		if not m:
			print(f"BaseParser._filenameToDict {ERROR}: REGEX, {m=}, {filename}, {list(filename)=}")
			return {}
		else:
			print(f"BaseParser._filenameToDict {OK}: REGEX, {filename}, {m=}, {m.groups()=}")
		res = {
			"subject": m.group(1) or "",
			"number": m.group(2) or "",
			"date": dateFormat(m.group(3)) if m.group(3) else "", # –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ lambda –Ω–µ—Ç—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ None
			"course": m.group(4) or "",
			"semester": m.group(5) or "",
			"teacher": m.group(6) or "",
			"doginfo": m.group(7) or "",
			"filetype": f".{m.group(8)}" if m.group(8) else ""  # –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–∏ –æ—à–∏–±–∫–∏ –∫–æ–Ω–∫–æ—Ç–µ–Ω–∞—Ü–∏–∏ —Å None
		}

		# –∑–∞–º–µ–Ω–∞ –≤—Å–µ—Ö _ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
		for key, value in res.items():
			res[key] = (value or "").replace('_', ' ')

		return res
	
	@staticmethod
	def cleanText(text: str) -> str:
		text = text.lower().replace('—ë', '–µ')
		text = re.sub(r'[^a-z–∞-—è–µ0-9 ]', ' ', text)
		text = re.sub(r'\s+', ' ', text) # –∑–∞–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ' ' –Ω–∞ ' '
		return text.strip() # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏

	@classmethod
	def initMetadata(cls, path):
		# fix –º–∞–∫–±—É–∫–æ–≤—Å–∫–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –±—É–∫–≤—ã —ë (–≤–æ—Ç —Ç–∞–∫: –µÃà) –∏ –±—É–∫–≤—ã –π (–≤–æ—Ç —Ç–∞–∫: –∏ÃÜ)
		file_path = Path(
			str(Path(path).resolve())
				.replace('–∏\u0306','–π')
				.replace('–µ\u0308','—ë')
		)

		# –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
		if isinstance(file_path, str): # –¥–ª—è str
			file_path = Path(file_path)
		elif isinstance(file_path, Path):
			pass
		else:
			raise ValueError(f"BaseParser.initMetadata {ERROR}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≤—Ö–æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ file_path - ({type(file_path)}) (–æ–∂–∏–¥–∞–µ—Ç—Å—è str –∏–ª–∏ Path)")

		# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
		return {
		    "filename": file_path.name,
		    "path": str(file_path.resolve()),
		    "tags": cls._filenameToDict(file_path),
		    "len_pages": None,    # –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —á–∏—Å–ª–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü
		    "text": None,
		    "pages": None         # –±—É–¥–µ—Ç —Å–ø–∏—Å–∫–æ–º —Å–ø–∏—Å–∫–æ–≤ —Å–ª–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
		}
	
	


class ImgParser(BaseParser):
	"""
	–ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –û–î–ù–û–ì–û –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è PNG.
	"""

	def run(self, path):
		# fix –º–∞–∫–±—É–∫–æ–≤—Å–∫–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –±—É–∫–≤—ã —ë (–≤–æ—Ç —Ç–∞–∫: –µÃà) –∏ –±—É–∫–≤—ã –π (–≤–æ—Ç —Ç–∞–∫: –∏ÃÜ)
		img_path = Path(
			str(Path(path).resolve())
				.replace('–∏\u0306','–π')
				.replace('–µ\u0308','—ë')
		)
		print(f"{cb('ImgParser.run')}: {img_path}")
		

		RESULT_dict = self.initMetadata(img_path) # classmethod –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏ —á–µ—Ä–µ–∑ —ç–∫–∑–µ–º–ø–ª—è—Ä.
		
		ocr_text, ocr_words = self.ocrEngine(img_path) # —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OCR –º–µ—Ç–æ–¥–∞

		# –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ñ–æ—Ä–º–∞—Ç—É (–î–ê–ñ–ï –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Å–µ–≥–æ –æ–¥–Ω–∞)
		# words = [{"word": i['word'], "coords": i['coords'], "page": 1} for i in words]
		# words = [{"word": i[0], "coords": i[1], "page": 0} for i in words_list] # –°–¢–ê–†–ê–Ø —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
		# —Å–ø–∏—Å–æ–∫ –∏–∑ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–ª–æ–≤–∞–º–∏ (—Å–ª–æ–≤–∞—Ä—è–º–∏)
		#pages = [[{"word": i[0], "coords": i[1]} for i in ocr_words]] 
		pages = [ocr_words,] # —Ç–µ–ø–µ—Ä—å –≤—Å—ë –≤ ocrEngine

		
		RESULT_dict['text'] = ocr_text
		RESULT_dict['len_pages'] = 1 # —Ç–∞–∫ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 
		RESULT_dict['pages'] = pages
		
		return RESULT_dict # –Ω–∞ —ç—Ç–æ–º –º–æ–º–µ–Ω—Ç–µ —Ç—É—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π json –¥–æ–∫—É–º–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–ª—è—Ç—å –≤ –ë–î


class PdfParser(BaseParser):
	"""docstring for PdfParser
	
	run(cls, pdf_path) - –º–µ—Ç–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—â–∏–π PDF –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª–µ–∫—Ü–∏–∏
	renderToPic(cls, pdf_path, page_num, output_path) - –º–µ—Ç–æ–¥ —Ä–µ–Ω–¥–µ—Ä–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤ (–≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã/–æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
	_extract_image(cls, doc, block) - –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
	_renderToPicServise(cls, page, output_path) - —Å–µ—Ä–≤–∏—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∫–∞—Ä—Ç–∏–Ω–∫—É
	"""

	def run(self, path):
		# fix –º–∞–∫–±—É–∫–æ–≤—Å–∫–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –±—É–∫–≤—ã —ë (–≤–æ—Ç —Ç–∞–∫: –µÃà) –∏ –±—É–∫–≤—ã –π (–≤–æ—Ç —Ç–∞–∫: –∏ÃÜ)
		pdf_path = Path(
			str(Path(path).resolve())
				.replace('–∏\u0306','–π')
				.replace('–µ\u0308','—ë')
		)

		pdf_path = Path(pdf_path)
		print(f"{cb('PdfParser.run')}: {pdf_path}")

		RESULT_dict = self.initMetadata(pdf_path) # classmethod –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏ —á–µ—Ä–µ–∑ —ç–∫–∑–µ–º–ø–ª—è—Ä. ü§Ø

		doc = fitz.open(str(pdf_path)) # –Ω–∞—à –¥–æ–∫—É–º–µ–Ω—Ç–∏–∫
		
		all_text = '' # –ø–æ–ª–Ω—ã–π —Å–ø–ª–æ—à–Ω–æ–π —Ç–µ–∫—Å—Ç —Å —Ñ–∞–π–ª–∞
		all_pages = [] # —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–æ —Å–ª–æ–≤–æ—Ä—è–º–∏ 
		'''
		"pages": [
			[
				{"word": "—è", "coords": [[269, 127], [368, 127], [368, 142], [269, 142]]},
				{"word": "—Ç–∏–º", "coords": [[382, 127], [530, 127], [530, 146], [382, 146]]}
			],
			[
				{"word": "–º–æ—Ç–æ—Ü–∏–∫–ª", "coords": [[545, 122], [626, 122], [626, 146], [545, 146]]},
				{"word": "–µ–¥–µ—Ç", "coords": [[545, 122], [626, 122], [626, 146], [545, 146]]}
			]
		]
		'''

		# –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ü–û –°–¢–†–ê–ù–ò–¶–ê–ú (–∏—Ç–µ—Ä–∞—Ü–∏—è = —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
		for page_index, page in enumerate(doc):
			#pp(inspect.getmembers(page, lambda v: not callable(v)))
			#input("???>")
			current_page_words = []  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (—Å–ª–æ–≤–æ - —Å–ª–æ–≤–∞—Ä–∏–∫ words coords)

			# ================== –¢–ï–ö–°–¢ –ù–ê –°–¢–†–ê–ù–ò–¶–ï ==================
			# –¥–æ—Å—Ç–∞—ë–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–ø–ª–æ—à–Ω—è–∫–æ–º —Å–æ —Å—Ç–∞–Ω–∏—Ü—ã
			text_data = page.get_text("text")
			if text_data: 
				all_text += str(text_data) + "\n\n"

			# –¥–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–æ–≤–∞—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
			words_data = page.get_text("words")
			for w in words_data:
				x0, y0, x1, y1, word = w[0], w[1], w[2], w[3], w[4]
				current_page_words.append({
						"word": self.cleanText(word),
						"coords": ((x0, y0), (x1, y0), (x1, y1), (x0, y1))  # —Ñ–æ—Ä–º–∞—Ç —Å —á–µ—Ç—ã—Ä—å–º—è —Ç–æ—á–∫–∞–º–∏
					})

			# ================== –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –ù–ê –°–¢–†–ê–ù–ò–¶–ï ==================
			images = page.get_images(full=True)  # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
			
			# print(f"PdfParser.run {INFO}: page_index {page_index}: found {len(images)} images")
			
			# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
			for i in images:
				xref = i[0]  # XREF –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
				base_image = doc.extract_image(xref)  # –ø–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
				image_bytes = base_image["image"] # –ø–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö

				# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ PIL
				pil_img = Image.open(BytesIO(image_bytes))
				# pil_img.show()

				# OCR –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
				ocr_text, ocr_words = self.ocrEngine(pil_img) # list: [full_text:str, [(word: str, coords: tuple), (word: str, coords: tuple), ...]]
				all_text += ocr_text + "\n\n"
				
				# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞–º–∫–∏ (Rect) –¥–∞–Ω–Ω–æ–≥–æ XREF –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
				rects = page.get_image_rects(xref)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Rect —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
				#if len(rects) > 1: print(f'\033[91m<–û–ß–ï–ù–¨ –†–ï–î–ö–ê–Ø –û–®–ò–ë–ö–ê ‚Ññ412>\033[0m\n{rects=}')

				if rects:
					pic_box = (rects[0].x0, rects[0].y0, rects[0].x1, rects[0].y1)
				else:
					continue
				
				''' –≤—Ä–æ–¥–µ –Ω–µ–Ω—É–∂–Ω—ã–π –∫—É—Å–æ–∫ –∫–æ–¥–∞
				if len(rects) > 1:
					print(f"PdfParser.run {INFO}: –Ω–∞–π–¥–µ–Ω–æ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è xref={xref}")
					for rect in rects:
						print(f"–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ-–ª–µ–≤–æ–≥–æ ({rect.x0:.2f}, {rect.y0:.2f}), "
						  f"–Ω–∏–∂–Ω–µ–≥–æ-–ø—Ä–∞–≤–æ–≥–æ ({rect.x1:.2f}, {rect.y1:.2f})")
				'''
				
				# –ü–µ—Ä–µ–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ (–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü, –∞ –∫–æ–Ω–∫–æ—Ç–µ–Ω–∞—Ü–∏—è –¥–≤—É—Ö —Å–ø–∏—Å–∫–æ–≤ –Ω–∞ —Ä–∞–≤–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö)
				current_page_words += self._convert_coords_from_image(
							ocr_words, # list: [(word: str, coords: tuple), (word: str, coords: tuple), ...]
							pic_box,   # tuple: (x0, y0, x1, y1)
							pil_img    # PIL.Image
						)


			# –¥–æ–±–∞–≤–ª–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞/—Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –æ–±—â–∏–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
			all_pages.append(current_page_words)
			'''
			"pages": [
				[
					{"word": "—è", "coords": [[269, 127], [368, 127], [368, 142], [269, 142]]},
					{"word": "—Ç–∏–º", "coords": [[382, 127], [530, 127], [530, 146], [382, 146]]}
				],
				[
					{"word": "–º–æ—Ç–æ—Ü–∏–∫–ª", "coords": [[545, 122], [626, 122], [626, 146], [545, 146]]},
					{"word": "–µ–¥–µ—Ç", "coords": [[545, 122], [626, 122], [626, 146], [545, 146]]}
				]
			]
			'''
		
		# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
		RESULT_dict['pages'] = all_pages
		RESULT_dict['text'] = all_text
		RESULT_dict['len_pages'] = len(doc)
		return RESULT_dict

	def _convert_coords_from_image(self, ocr_words, pic_box, pil_image):
		"""
		–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–ª–æ–≤ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.
		–¢–µ–ø–µ—Ä—å local_coords ‚Äî —ç—Ç–æ ((x0, y0), (x1, y0), (x1, y1), (x0, y1)).
		–í–°–ï–ì–î–ê —á–µ—Ç—ã—Ä—ë—Ö—Ç–æ—á–µ–Ω—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
		"""
		# print(f"PdfParser._convert_coords_from_image: {INFO}: {len(ocr_words)=} {pic_box=} {pil_image=}")
		res_pages_list = [] # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏

		# –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (pic_box ‚Äî —ç—Ç–æ (x0_page, y0_page, x1_page, y1_page))
		x0_page, y0_page, x1_page, y1_page = pic_box
		
		# –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
		factor_x = (x1_page - x0_page) / pil_image.width
		factor_y = (y1_page - y0_page) / pil_image.height

		# –ø–µ—Ä–µ–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–ª–æ–≤ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
		for word_dict in ocr_words: 
			# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ª–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ((x0, y0), (x1, y0), (x1, y1), (x0, y1))
			# –ù–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ (x0, y0) –∏ (x1, y1) ‚Äî –ø–µ—Ä–≤–∞—è –∏ —Ç—Ä–µ—Ç—å—è —Ç–æ—á–∫–∏
			(lx0, ly0), _, (lx1, ly1), _ = word_dict['coords'] # word['coords'] - —ç—Ç–æ ((x0, y0), (x1, y0), (x1, y1), (x0, y1))

			# –í—ã—á–∏—Å–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —É—á—ë—Ç–æ–º zoom
			global_coords = (
				(x0_page + lx0 * factor_x, y0_page + ly0 * factor_y),  # –≤–µ—Ä—Ö–Ω–∏–π-–ª–µ–≤—ã–π
				(x0_page + lx1 * factor_x, y0_page + ly0 * factor_y),  # –≤–µ—Ä—Ö–Ω–∏–π-–ø—Ä–∞–≤—ã–π
				(x0_page + lx1 * factor_x, y0_page + ly1 * factor_y),  # –Ω–∏–∂–Ω–∏–π-–ø—Ä–∞–≤—ã–π
				(x0_page + lx0 * factor_x, y0_page + ly1 * factor_y)   # –Ω–∏–∂–Ω–∏–π-–ª–µ–≤—ã–π
			)

			res_pages_list.append({"word": word_dict['word'], "coords": global_coords})
   
		return res_pages_list

	def _renderToPicServise(self, page, output_path, file_path, zoom): 
		# output_path - –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, file_path - –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É, zoom - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞—á–µ—Å—Ç–≤–∞)
		try:
			matrix = fitz.Matrix(zoom, zoom)
			pix = page.get_pixmap(matrix=matrix)
			pix.save(str(output_path))
		except Exception as e:
			print(f"PdfParser._renderToPicServise {ERROR}:\n{str(e)}\n\n<{file_path}> to {output_path}")
		else:
			#print(f"PdfParser._renderToPicServise {OK} to {output_path.relative_to(Path.cwd())}")
			pass
	
	def renderToPic(self, path, page_index=None, output_path=None, zoom=1.0):
		'''docstring for PdfParser.renderToPic
		—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–≤—É—Ö —Ä–µ–∂–∏–º–∞—Ö:
		1. –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, —Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
		2. –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, —Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç

		arguments:
			path - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (str, Path)
			page_number - –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (int, None) (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, —Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç)
			output_path - –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (str, Path, None) (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, —Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ TEMP_FOLDER)
			zoom - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (float, 1.0)
		return:
			output_path - –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
		'''
		# fix –º–∞–∫–±—É–∫–æ–≤—Å–∫–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –±—É–∫–≤—ã —ë (–≤–æ—Ç —Ç–∞–∫: –µÃà) –∏ –±—É–∫–≤—ã –π (–≤–æ—Ç —Ç–∞–∫: –∏ÃÜ)
		file_path = Path(
			str(Path(path).resolve())
				.replace('–∏\u0306','–π')
				.replace('–µ\u0308','—ë')
		)

		# –ï—Å–ª–∏ –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 
		if not output_path:
			if page_index is not None:
				output_path = Path(TEMP_FOLDER) / f"img{page_index}.png"
			else:
				output_path = Path(TEMP_FOLDER) / file_path.stem # (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Ç–∞–∫–æ–µ –∂–µ –∫–∞–∫ –∏ —É —Ñ–∞–π–ª–∞)
		else:
			output_path = Path(output_path)
		
		# –Ω–∞—à –¥–æ–∫—É–º–µ–Ω—Ç–∏–∫
		doc = fitz.open(str(file_path))

		if page_index is not None: # –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∫–∞–∑–∞–Ω–∞ (–µ—Å–ª–∏ page_index != None)
			if output_path.is_dir():
				print(f"PdfParser.renderToPic {ERROR}: –æ—à–∏–±–∫–∞ –ø—É—Ç–∏ <{file_path}> –ø—É—Ç—å –Ø–í–õ–Ø–ï–¢–°–Ø –î–ò–†–†–ï–ö–¢–û–†–ò–ï–ô (–æ–∂–∏–¥–∞–ª—Å—è –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É)")
				output_path = output_path / f"img{page_index}.png"
			
			output_path.parent.mkdir(parents=True, exist_ok=True)

			page = doc[page_index]
			self._renderToPicServise(page, output_path, file_path, zoom)

		else: # –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ù–ï —É–∫–∞–∑–∞–Ω–∞ (–Ω—É–∂–µ–Ω –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç)
			if output_path.is_file(): 
				raise Exception(f"PdfParser.renderToPic {ERROR}: –æ—à–∏–±–∫–∞ –ø—É—Ç–∏: <{file_path}> –ø—É—Ç—å –Ø–í–õ–Ø–ï–¢–°–Ø –§–ê–ô–õ–û–ú (–æ–∂–∏–¥–∞–ª—Å—è –ø—É—Ç—å –∫ –∂–µ–ª–∞–µ–º–æ–π –ø–∞–ø–∫–µ)")
			
			output_path.mkdir(parents=True, exist_ok=True)

			for idx, page in enumerate(doc):
				img_path = output_path / f'img{idx}.png'
				self._renderToPicServise(page, img_path, file_path, zoom)
		
		print(f"PdfParser.renderToPic: {OK} {file_path.name} [{page_index}] -> {output_path.name}")
		return output_path



# TODO: –Ω–∞–¥–æ –±—ã —Å–¥–µ–∞–ª–∞—Ç—å..
class PptxParser(BaseParser):
	pass

def main():
	#user_input = input('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è \n–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é:') or png_path

	png_path = './tests_sources/–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç_–≤_–ü–î--20240203-3-2-.png'
	pdf_path_img = './tests_sources/–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ_—Å–µ—Ç–∏--20240321-3-2-–õ—é—Ç—Ü_–°–µ—Ä–≥–µ–∏ÃÜ_–í–∞—Å–∏–ª—å–µ–≤–∏—á.pdf' # pdf –∏–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫
	pdf_path_text = './tests_sources/–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ_–∏_–¥–∏–∑–∞–∏ÃÜ–Ω-1--3-1-–ú–∏–ª–µ—Ö–∏–Ω–∞_–û–ª—å–≥–∞_–í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞.pdf' # pdf –∏–∑ —Ç–µ–∫—Å—Ç–∞

	input('\n–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ô –†–ï–ñ–ò–ú (–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï) (–Ω–∞–¥–æ –Ω–∞–∂–∏–º–∞—Ç—å Enter –∫–∞–∂–¥—ã–π —Ä–∞–∑)')
	ImgPrs = ImgParser()
	pdfPrs = PdfParser()

	input('\n ================ –¢–ï–°–¢ ImgParser.run() ================')
	res = ImgPrs.run(png_path)
	pp(res)
	print('\n–†–ï–ó–£–õ–¨–¢–ê–¢: (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π json –¥–æ–∫—É–º–µ–Ω—Ç)')

	input('\n ================ –¢–ï–°–¢ PdfParser.run() (–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π) ================')
	res = pdfPrs.run(pdf_path_img)
	pp(res)
	print('\n–†–ï–ó–£–õ–¨–¢–ê–¢: (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π json –¥–æ–∫—É–º–µ–Ω—Ç)')
	
	input('\n ================ –¢–ï–°–¢ PdfParser.run() (–∏–∑ —Ç–µ–∫—Å—Ç–∞) ================')
	res = pdfPrs.run(pdf_path_text)
	pp(res)
	print('\n–†–ï–ó–£–õ–¨–¢–ê–¢: (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π json –¥–æ–∫—É–º–µ–Ω—Ç)')

	input('\n ================ –¢–ï–°–¢ PdfParser.renderToPic() ================')
	pdfPrs.renderToPic(pdf_path_img)
	print('\n–†–ï–ó–£–õ–¨–¢–ê–¢: (–¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Å—Ç—è –ø–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏)')

	input('\n ================ –¢–ï–°–¢ PdfParser.renderToPic() 1 IMAGE page ================')
	pdfPrs.renderToPic(pdf_path_img, 1)
	print('\n–†–ï–ó–£–õ–¨–¢–ê–¢: (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)')

	input('\n ================ –¢–ï–°–¢ PdfParser.renderToPic() castom page castom name TEXT ================')
	pdfPrs.renderToPic(pdf_path_text, 3, './temp_image_castom_name.png')
	print('\n–†–ï–ó–£–õ–¨–¢–ê–¢: (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã c –∏–º–µ–Ω–µ–º –∏ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ)')


def _experiment(pdf_path_img):
	pdfPrs = PdfParser()

	res = pdfPrs.run(pdf_path_img)
	pages = res["pages"]
	words = []
	for p in pages:
		for i in p:
			words.append(i["word"])

	print('\n', [w for w in words if ' ' in w])

# –≤ —Å–∫–æ–ª—å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –µ—Å—Ç—å –ø–æ–ª–µ word, –≤ –∫—Ç–æ—Ä–æ–º –µ—Å—Ç—å —Ö–æ—Ç—è-–±—ã –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª?
def experimentator():
	pdf_dir = Path('../../filesroot/')
	pdf_files = list(pdf_dir.glob('*.pdf'))[:5]

	for pdf_file in pdf_files:
		_experiment(pdf_file)

if __name__ == "__main__":
	main()



